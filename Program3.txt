#include <stdio.h>
#include <stdlib.h>
#include <mpi.h>

#define ROOT 0
#define DATA_SIZE 4

int main(int argc, char *argv[]){
	int nodes, rank;
	int *partical, *send_data, *recv_data;
	int size, mysize, i, k, j, partial_sum, total;

	MPI_Init(&argc, &argv);
	MPI_Comm_size(MPI_COMM_WORLD, &nodes);
	MPI_Comm_rank(MPI_COMM_WORLD, &rank);

	partial = (int*)malloc(DATA_SIZE*sizeof(int));
	if(rank == ROOT){
		size=DATA_SIZE*nodes;
		send_data = (int*)malloc(size*sizeof(int));
		recv_data = (int*)malloc(nodes*sizeof(int));
		for(i=0;i<size;i++)
			send_data[i]=i; 
	}
	
	MPI_Scatter(send_data, DATA_SIZE, MPI_INT, partial, DATA_SIZE, MPI_INT, 
ROOT, MPI_COMM_WORLD);
	partial sum = 0;
	for(i=0; i<DATA_SIZE; i++)
		partial_sum = partial_sum + partial[i];

	printf("rank=%d total=%d\n", rank, partial_sum);

	MPI_Reduce(&partial_sum, &total, 1, MPI_INT, MPI_SUM, ROOT, MPI_COMM_WORLD);

		if(rank == ROOT){
			printf("Total is - %d \n", total);
		}
		MPI_Finalize();
}